<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.example</groupId>
        <artifactId>ocr-java</artifactId>
        <version>1.0</version>
    </parent>
    <artifactId>api</artifactId>
    <name>api</name>
    <version>1.0</version>
    <description>api server</description>

    <!-- Properties -->
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>

        <!-- character-set 설정 -->
        <project.build.sourceEncoding>utf-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>utf-8</project.reporting.outputEncoding>

        <!-- 배포 대상의 디렉토리 경로 설정 -->
        <deploy.target.dir>C:/apps/ocr/api</deploy.target.dir>

        <!-- 의존성 라이브러리 버전 별도 관리 -->
        <tess4j.v>5.12.0</tess4j.v>
        <swagger.v>2.6.0</swagger.v>
        <aws.s3.v>2.29.40</aws.s3.v>
        <jpa.v>3.4.0</jpa.v>
        <psql.v>42.7.4</psql.v>
    </properties>

    <!-- Add typical dependencies for a web application -->
    <dependencies>
        <!-- Multi Module 공통모듈 -->
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>core</artifactId>
            <version>1.0</version>
        </dependency>

        <!-- Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- Swagger UI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${swagger.v}</version>
        </dependency>

        <!-- AWS S3 -->
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>${aws.s3.v}</version>
        </dependency>

        <!-- JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${jpa.v}</version>
        </dependency>

        <!-- PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${psql.v}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!-- 자바 버전 및 컴파일 옵션 지정 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- install시 test 스킵 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!-- 이전 빌드 결과물 제거 및 항상 새로운 빌드 결과물 생성 보장 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <executions>
                    <execution>
                        <id>clean-target</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>${deploy.target.dir}</directory>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- jar 파일로 패키징 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${deploy.target.dir}</outputDirectory>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <packageName>com.example.api</packageName>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>
                                com.example.api.ApiApplication
                            </mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- 의존성 관리 (별도 lib 에 복사)  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${deploy.target.dir}/lib
                            </outputDirectory>

                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <!--
                                lombok과 사용하지 않는 jar파일들은 복사하지 않음
                                lombok은 프로그램 개발시에만 필요함
                            -->
                            <excludeArtifactIds>
                                lombok
                            </excludeArtifactIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- resource 복사  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/ext</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${deploy.target.dir}/ext</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-template</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/template</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${deploy.target.dir}/template</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-docker</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/docker/</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${deploy.target.dir}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>